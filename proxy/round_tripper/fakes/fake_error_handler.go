// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/gorouter/logger"
	"code.cloudfoundry.org/gorouter/proxy/utils"
)

type ErrorHandler struct {
	HandleErrorStub        func(logger.Logger, utils.ProxyResponseWriter, error)
	handleErrorMutex       sync.RWMutex
	handleErrorArgsForCall []struct {
		arg1 logger.Logger
		arg2 utils.ProxyResponseWriter
		arg3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ErrorHandler) HandleError(arg1 logger.Logger, arg2 utils.ProxyResponseWriter, arg3 error) {
	fake.handleErrorMutex.Lock()
	fake.handleErrorArgsForCall = append(fake.handleErrorArgsForCall, struct {
		arg1 logger.Logger
		arg2 utils.ProxyResponseWriter
		arg3 error
	}{arg1, arg2, arg3})
	fake.recordInvocation("HandleError", []interface{}{arg1, arg2, arg3})
	fake.handleErrorMutex.Unlock()
	if fake.HandleErrorStub != nil {
		fake.HandleErrorStub(arg1, arg2, arg3)
	}
}

func (fake *ErrorHandler) HandleErrorCallCount() int {
	fake.handleErrorMutex.RLock()
	defer fake.handleErrorMutex.RUnlock()
	return len(fake.handleErrorArgsForCall)
}

func (fake *ErrorHandler) HandleErrorArgsForCall(i int) (logger.Logger, utils.ProxyResponseWriter, error) {
	fake.handleErrorMutex.RLock()
	defer fake.handleErrorMutex.RUnlock()
	return fake.handleErrorArgsForCall[i].arg1, fake.handleErrorArgsForCall[i].arg2, fake.handleErrorArgsForCall[i].arg3
}

func (fake *ErrorHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleErrorMutex.RLock()
	defer fake.handleErrorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ErrorHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
