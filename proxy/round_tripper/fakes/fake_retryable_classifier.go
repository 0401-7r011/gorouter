// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/gorouter/proxy/round_tripper"
)

type FakeRetryableClassifier struct {
	IsRetryableStub        func(err error) bool
	isRetryableMutex       sync.RWMutex
	isRetryableArgsForCall []struct {
		err error
	}
	isRetryableReturns struct {
		result1 bool
	}
	isRetryableReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRetryableClassifier) IsRetryable(err error) bool {
	fake.isRetryableMutex.Lock()
	ret, specificReturn := fake.isRetryableReturnsOnCall[len(fake.isRetryableArgsForCall)]
	fake.isRetryableArgsForCall = append(fake.isRetryableArgsForCall, struct {
		err error
	}{err})
	fake.recordInvocation("IsRetryable", []interface{}{err})
	fake.isRetryableMutex.Unlock()
	if fake.IsRetryableStub != nil {
		return fake.IsRetryableStub(err)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.isRetryableReturns.result1
}

func (fake *FakeRetryableClassifier) IsRetryableCallCount() int {
	fake.isRetryableMutex.RLock()
	defer fake.isRetryableMutex.RUnlock()
	return len(fake.isRetryableArgsForCall)
}

func (fake *FakeRetryableClassifier) IsRetryableArgsForCall(i int) error {
	fake.isRetryableMutex.RLock()
	defer fake.isRetryableMutex.RUnlock()
	return fake.isRetryableArgsForCall[i].err
}

func (fake *FakeRetryableClassifier) IsRetryableReturns(result1 bool) {
	fake.IsRetryableStub = nil
	fake.isRetryableReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRetryableClassifier) IsRetryableReturnsOnCall(i int, result1 bool) {
	fake.IsRetryableStub = nil
	if fake.isRetryableReturnsOnCall == nil {
		fake.isRetryableReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isRetryableReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRetryableClassifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isRetryableMutex.RLock()
	defer fake.isRetryableMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRetryableClassifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ round_tripper.RetryableClassifier = new(FakeRetryableClassifier)
